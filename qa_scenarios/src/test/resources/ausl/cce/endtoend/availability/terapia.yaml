# namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring-app
---
# terapia-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: terapia
  namespace: monitoring-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: terapia
  template:
    metadata:
      labels:
        app: terapia
    spec:
      containers:
        - name: terapia
          image: marcofontana17/ausl_cce_prototipo:terapia-dev-latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: CONFIG_SERVER_HOST_NAME
              value: "terapia-mongo-db"
            - name: CONFIG_SERVER_PORT
              value: "27017"
            - name: CONFIG_SERVER_DB_NAME
              value: "terapia-mongo-db"
            - name: CONFIG_SERVER_DB_USERNAME
              value: "root"
            - name: CONFIG_SERVER_DB_PASSWORD
              value: "password"
            - name: KAFKA_HOST
              value: "broker-0.broker.monitoring-app.svc.cluster.local"
            - name: KAFKA_PORT
              value: "9092"
          resources:
            requests:
              memory: "512Mi"
              cpu: "200m"
            limits:
              memory: "1Gi"
              cpu: "500m"
---
# terapia-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: terapia
  namespace: monitoring-app
spec:
  selector:
    app: terapia
  ports:
    - name: http
      port: 8080
      targetPort: 8080
  type: ClusterIP
---
# terapia-hpa.yaml (horizontal pod autoscaler for terapia)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: terapia-hpa
  namespace: monitoring-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: terapia
  minReplicas: 1  # minimum number of replicas to scale down to
  maxReplicas: 20  # maximum number of replicas to scale up to
  metrics:
    # scale based on CPU utilization, others can be added as needed, like 'memory'
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 66 # 2/3 of requested CPU % to scale up
#  behavior:
#    # define custom scaling behavior (optional)
#    scaleUp:
#      stabilizationWindowSeconds: 0    # scale up immediately
#    scaleDown:
#      stabilizationWindowSeconds: 120   # wait 2 minutes before scaling down after resource usage drops below threshold
---