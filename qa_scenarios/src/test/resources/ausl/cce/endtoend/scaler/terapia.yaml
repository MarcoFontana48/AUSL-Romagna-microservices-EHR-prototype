# namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring-app
---
# terapia-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: terapia
  namespace: monitoring-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: terapia
  template:
    metadata:
      labels:
        app: terapia
    spec:
#      initContainers:
#        - name: wait-for-kafka
#          image: busybox:1.35
#          command:
#            - sh
#            - -c
#            - |
#              TIMEOUT=600  # Increased to 10 minutes
#              ELAPSED=0
#
#              # First check if the service exists
#              echo "Checking if broker service exists in DNS..."
#
#              until nslookup broker.monitoring-app.svc.cluster.local || [ $ELAPSED -ge $TIMEOUT ]; do
#                echo "DNS lookup failed for broker.monitoring-app.svc.cluster.local (${ELAPSED}s elapsed)"
#                sleep 5
#                ELAPSED=$((ELAPSED + 5))
#              done
#
#              if [ $ELAPSED -ge $TIMEOUT ]; then
#                echo "Timeout: Could not resolve broker.monitoring-app.svc.cluster.local after ${TIMEOUT}s"
#                exit 1
#              fi
#
#              echo "DNS resolved successfully! Now checking if port 9092 is open..."
#              ELAPSED=0
#
#              until nc -z broker.monitoring-app.svc.cluster.local 9092 || [ $ELAPSED -ge $TIMEOUT ]; do
#                echo "Waiting for Kafka broker to accept connections... (${ELAPSED}s elapsed)"
#                sleep 10
#                ELAPSED=$((ELAPSED + 10))
#              done
#
#              if [ $ELAPSED -ge $TIMEOUT ]; then
#                echo "Timeout waiting for Kafka after ${TIMEOUT}s"
#                exit 1
#              fi
#
#              echo "Kafka is ready and accepting connections!"
      containers:
        - name: terapia
          image: marcofontana17/ausl_cce_prototipo:terapia-dev-latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: CONFIG_SERVER_HOST_NAME
              value: "terapia-mongo-db"
            - name: CONFIG_SERVER_PORT
              value: "27017"
            - name: CONFIG_SERVER_DB_NAME
              value: "terapia-mongo-db"
            - name: CONFIG_SERVER_DB_USERNAME
              value: "root"
            - name: CONFIG_SERVER_DB_PASSWORD
              value: "password"
            - name: KAFKA_HOST
              value: "broker-0.broker.monitoring-app.svc.cluster.local"
            - name: KAFKA_PORT
              value: "9092"
            - name: SERVER_TOMCAT_MAX_CONNECTIONS
              value: "200"
            - name: SERVER_TOMCAT_THREADS_MAX
              value: "200"
            - name: SERVER_TOMCAT_ACCEPT_COUNT
              value: "100"
            - name: SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE
              value: "20"
            - name: SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE
              value: "5"
            - name: SERVER_NETTY_CONNECTION_TIMEOUT
              value: "30000"
            - name: SERVER_CONNECTION_TIMEOUT
              value: "30000"
            - name: VERTX_OPTIONS_EVENT_LOOP_POOL_SIZE
              value: "8"
            - name: VERTX_OPTIONS_WORKER_POOL_SIZE
              value: "40"
            - name: JVM_OPTS
              value: "-Xmx1536m -Xms512m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
          #          livenessProbe:
          #            httpGet:
          #              path: /health
          #              port: 8080
          #            initialDelaySeconds: 30
          #            periodSeconds: 10
          #            timeoutSeconds: 5
          #            failureThreshold: 5
          #          readinessProbe:
          #            httpGet:
          #              path: /health
          #              port: 8080
          #            initialDelaySeconds: 10
          #            periodSeconds: 5
          #            timeoutSeconds: 3
          #            failureThreshold: 5
          resources:
            requests:
              memory: "512Mi"
              cpu: "1000m"
            limits:
              memory: "2Gi"
              cpu: "2000m"
---
# terapia-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: terapia
  namespace: monitoring-app
spec:
  selector:
    app: terapia
  ports:
    - name: http
      port: 8080
      targetPort: 8080
  type: ClusterIP
---
# terapia-hpa.yaml (horizontal pod autoscaler for terapia)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: terapia-hpa
  namespace: monitoring-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: terapia
  minReplicas: 1  # minimum number of replicas to scale down to
  maxReplicas: 10  # maximum number of replicas to scale up to
  metrics:
    # scale based on CPU utilization, others can be added as needed, like 'memory'
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 10  # target CPU utilization percentage to trigger scaling (very low for testing, not realistic)
  behavior:
    # define custom scaling behavior (optional)
    scaleUp:
      stabilizationWindowSeconds: 0    # scale up immediately
    scaleDown:
      stabilizationWindowSeconds: 60   # wait 1 min before scaling down
---